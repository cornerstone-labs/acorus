// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: appchain.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type L1StakerRewardsAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId       string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	StakerAddress string `protobuf:"bytes,2,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	Strategies    string `protobuf:"bytes,3,opt,name=strategies,proto3" json:"strategies,omitempty"`
}

func (x *L1StakerRewardsAmountRequest) Reset() {
	*x = L1StakerRewardsAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1StakerRewardsAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1StakerRewardsAmountRequest) ProtoMessage() {}

func (x *L1StakerRewardsAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1StakerRewardsAmountRequest.ProtoReflect.Descriptor instead.
func (*L1StakerRewardsAmountRequest) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{0}
}

func (x *L1StakerRewardsAmountRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *L1StakerRewardsAmountRequest) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *L1StakerRewardsAmountRequest) GetStrategies() string {
	if x != nil {
		return x.Strategies
	}
	return ""
}

type L1StakerRewardsAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Income  string `protobuf:"bytes,3,opt,name=income,proto3" json:"income,omitempty"`
}

func (x *L1StakerRewardsAmountResponse) Reset() {
	*x = L1StakerRewardsAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1StakerRewardsAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1StakerRewardsAmountResponse) ProtoMessage() {}

func (x *L1StakerRewardsAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1StakerRewardsAmountResponse.ProtoReflect.Descriptor instead.
func (*L1StakerRewardsAmountResponse) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{1}
}

func (x *L1StakerRewardsAmountResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *L1StakerRewardsAmountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *L1StakerRewardsAmountResponse) GetIncome() string {
	if x != nil {
		return x.Income
	}
	return ""
}

type L2StakerRewardsAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId       string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	StakerAddress string `protobuf:"bytes,2,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	Strategy      string `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *L2StakerRewardsAmountRequest) Reset() {
	*x = L2StakerRewardsAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2StakerRewardsAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2StakerRewardsAmountRequest) ProtoMessage() {}

func (x *L2StakerRewardsAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2StakerRewardsAmountRequest.ProtoReflect.Descriptor instead.
func (*L2StakerRewardsAmountRequest) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{2}
}

func (x *L2StakerRewardsAmountRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *L2StakerRewardsAmountRequest) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *L2StakerRewardsAmountRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

type L2StakerRewardsAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Income  string `protobuf:"bytes,3,opt,name=income,proto3" json:"income,omitempty"`
}

func (x *L2StakerRewardsAmountResponse) Reset() {
	*x = L2StakerRewardsAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2StakerRewardsAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2StakerRewardsAmountResponse) ProtoMessage() {}

func (x *L2StakerRewardsAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2StakerRewardsAmountResponse.ProtoReflect.Descriptor instead.
func (*L2StakerRewardsAmountResponse) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{3}
}

func (x *L2StakerRewardsAmountResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *L2StakerRewardsAmountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *L2StakerRewardsAmountResponse) GetIncome() string {
	if x != nil {
		return x.Income
	}
	return ""
}

type L2UnStakeRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakerAddress string `protobuf:"bytes,1,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	Strategy      string `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Page          uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *L2UnStakeRecordRequest) Reset() {
	*x = L2UnStakeRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2UnStakeRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2UnStakeRecordRequest) ProtoMessage() {}

func (x *L2UnStakeRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2UnStakeRecordRequest.ProtoReflect.Descriptor instead.
func (*L2UnStakeRecordRequest) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{4}
}

func (x *L2UnStakeRecordRequest) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *L2UnStakeRecordRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *L2UnStakeRecordRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *L2UnStakeRecordRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type L2UnStakeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid          string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	BlockNumber   int64  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash        string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	EthAmount     int64  `protobuf:"varint,4,opt,name=eth_amount,json=ethAmount,proto3" json:"eth_amount,omitempty"`
	LockedAmount  int64  `protobuf:"varint,5,opt,name=locked_amount,json=lockedAmount,proto3" json:"locked_amount,omitempty"`
	ClaimTxHash   string `protobuf:"bytes,6,opt,name=claim_tx_hash,json=claimTxHash,proto3" json:"claim_tx_hash,omitempty"`
	L2Strategy    string `protobuf:"bytes,7,opt,name=l2_strategy,json=l2Strategy,proto3" json:"l2_strategy,omitempty"`
	Staker        string `protobuf:"bytes,8,opt,name=staker,proto3" json:"staker,omitempty"`
	Bridge        string `protobuf:"bytes,9,opt,name=bridge,proto3" json:"bridge,omitempty"`
	SourceChainId string `protobuf:"bytes,10,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	DestChainId   string `protobuf:"bytes,11,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	Status        int32  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	NotifyRelayer bool   `protobuf:"varint,13,opt,name=notify_relayer,json=notifyRelayer,proto3" json:"notify_relayer,omitempty"`
	Created       uint64 `protobuf:"varint,14,opt,name=created,proto3" json:"created,omitempty"`
	Updated       uint64 `protobuf:"varint,15,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *L2UnStakeRecord) Reset() {
	*x = L2UnStakeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2UnStakeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2UnStakeRecord) ProtoMessage() {}

func (x *L2UnStakeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2UnStakeRecord.ProtoReflect.Descriptor instead.
func (*L2UnStakeRecord) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{5}
}

func (x *L2UnStakeRecord) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *L2UnStakeRecord) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *L2UnStakeRecord) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *L2UnStakeRecord) GetEthAmount() int64 {
	if x != nil {
		return x.EthAmount
	}
	return 0
}

func (x *L2UnStakeRecord) GetLockedAmount() int64 {
	if x != nil {
		return x.LockedAmount
	}
	return 0
}

func (x *L2UnStakeRecord) GetClaimTxHash() string {
	if x != nil {
		return x.ClaimTxHash
	}
	return ""
}

func (x *L2UnStakeRecord) GetL2Strategy() string {
	if x != nil {
		return x.L2Strategy
	}
	return ""
}

func (x *L2UnStakeRecord) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *L2UnStakeRecord) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *L2UnStakeRecord) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *L2UnStakeRecord) GetDestChainId() string {
	if x != nil {
		return x.DestChainId
	}
	return ""
}

func (x *L2UnStakeRecord) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *L2UnStakeRecord) GetNotifyRelayer() bool {
	if x != nil {
		return x.NotifyRelayer
	}
	return false
}

func (x *L2UnStakeRecord) GetCreated() uint64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *L2UnStakeRecord) GetUpdated() uint64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type L2UnStakeRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string                                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Page    *L2UnStakeRecordResponse_L2UnStakePage `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *L2UnStakeRecordResponse) Reset() {
	*x = L2UnStakeRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2UnStakeRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2UnStakeRecordResponse) ProtoMessage() {}

func (x *L2UnStakeRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2UnStakeRecordResponse.ProtoReflect.Descriptor instead.
func (*L2UnStakeRecordResponse) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{6}
}

func (x *L2UnStakeRecordResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *L2UnStakeRecordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *L2UnStakeRecordResponse) GetPage() *L2UnStakeRecordResponse_L2UnStakePage {
	if x != nil {
		return x.Page
	}
	return nil
}

type L2StakeRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakerAddress string `protobuf:"bytes,1,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	Strategy      string `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Page          uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *L2StakeRecordRequest) Reset() {
	*x = L2StakeRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2StakeRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2StakeRecordRequest) ProtoMessage() {}

func (x *L2StakeRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2StakeRecordRequest.ProtoReflect.Descriptor instead.
func (*L2StakeRecordRequest) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{7}
}

func (x *L2StakeRecordRequest) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *L2StakeRecordRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *L2StakeRecordRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *L2StakeRecordRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type L2StakeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid         string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	BlockNumber  int64  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash       string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Shares       int64  `protobuf:"varint,4,opt,name=shares,proto3" json:"shares,omitempty"`
	Strategy     string `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Staker       string `protobuf:"bytes,6,opt,name=staker,proto3" json:"staker,omitempty"`
	TokenAddress string `protobuf:"bytes,7,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	ChainId      string `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Created      uint64 `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *L2StakeRecord) Reset() {
	*x = L2StakeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2StakeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2StakeRecord) ProtoMessage() {}

func (x *L2StakeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2StakeRecord.ProtoReflect.Descriptor instead.
func (*L2StakeRecord) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{8}
}

func (x *L2StakeRecord) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *L2StakeRecord) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *L2StakeRecord) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *L2StakeRecord) GetShares() int64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

func (x *L2StakeRecord) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *L2StakeRecord) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *L2StakeRecord) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *L2StakeRecord) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *L2StakeRecord) GetCreated() uint64 {
	if x != nil {
		return x.Created
	}
	return 0
}

type L2StakeRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string                             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Page    *L2StakeRecordResponse_L2StakePage `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *L2StakeRecordResponse) Reset() {
	*x = L2StakeRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2StakeRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2StakeRecordResponse) ProtoMessage() {}

func (x *L2StakeRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2StakeRecordResponse.ProtoReflect.Descriptor instead.
func (*L2StakeRecordResponse) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{9}
}

func (x *L2StakeRecordResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *L2StakeRecordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *L2StakeRecordResponse) GetPage() *L2StakeRecordResponse_L2StakePage {
	if x != nil {
		return x.Page
	}
	return nil
}

type L2UnStakeRecordResponse_L2UnStakePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage uint32             `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	PageSize    uint32             `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total       int64              `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Records     []*L2UnStakeRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *L2UnStakeRecordResponse_L2UnStakePage) Reset() {
	*x = L2UnStakeRecordResponse_L2UnStakePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2UnStakeRecordResponse_L2UnStakePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2UnStakeRecordResponse_L2UnStakePage) ProtoMessage() {}

func (x *L2UnStakeRecordResponse_L2UnStakePage) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2UnStakeRecordResponse_L2UnStakePage.ProtoReflect.Descriptor instead.
func (*L2UnStakeRecordResponse_L2UnStakePage) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{6, 0}
}

func (x *L2UnStakeRecordResponse_L2UnStakePage) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *L2UnStakeRecordResponse_L2UnStakePage) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *L2UnStakeRecordResponse_L2UnStakePage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *L2UnStakeRecordResponse_L2UnStakePage) GetRecords() []*L2UnStakeRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type L2StakeRecordResponse_L2StakePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage uint32           `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	PageSize    uint32           `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total       int64            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Records     []*L2StakeRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *L2StakeRecordResponse_L2StakePage) Reset() {
	*x = L2StakeRecordResponse_L2StakePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appchain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2StakeRecordResponse_L2StakePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2StakeRecordResponse_L2StakePage) ProtoMessage() {}

func (x *L2StakeRecordResponse_L2StakePage) ProtoReflect() protoreflect.Message {
	mi := &file_appchain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2StakeRecordResponse_L2StakePage.ProtoReflect.Descriptor instead.
func (*L2StakeRecordResponse_L2StakePage) Descriptor() ([]byte, []int) {
	return file_appchain_proto_rawDescGZIP(), []int{9, 0}
}

func (x *L2StakeRecordResponse_L2StakePage) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *L2StakeRecordResponse_L2StakePage) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *L2StakeRecordResponse_L2StakePage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *L2StakeRecordResponse_L2StakePage) GetRecords() []*L2StakeRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

var File_appchain_proto protoreflect.FileDescriptor

var file_appchain_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x70,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x4c, 0x31, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x1d, 0x4c, 0x31, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x1c, 0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x22, 0x6b, 0x0a, 0x1d, 0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x16, 0x4c, 0x32, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xd9, 0x03, 0x0a, 0x0f, 0x4c, 0x32, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x32, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x32, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x17,
	0x4c, 0x32, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x63, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x4c, 0x32, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x32, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x1a, 0xa5, 0x01, 0x0a, 0x0d,
	0x4c, 0x32, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x32, 0x55, 0x6e, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x85, 0x02, 0x0a, 0x0d, 0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x15, 0x4c, 0x32, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x32, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x1a, 0xa1, 0x01, 0x0a, 0x0b, 0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0xe7, 0x03, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x15, 0x4c, 0x31,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x31, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x31, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x15, 0x4c, 0x32,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x32, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x4c, 0x32,
	0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x2e,
	0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x32, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x63, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x4c, 0x32, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x4c, 0x32, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x4c, 0x32, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x63, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x32, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_appchain_proto_rawDescOnce sync.Once
	file_appchain_proto_rawDescData = file_appchain_proto_rawDesc
)

func file_appchain_proto_rawDescGZIP() []byte {
	file_appchain_proto_rawDescOnce.Do(func() {
		file_appchain_proto_rawDescData = protoimpl.X.CompressGZIP(file_appchain_proto_rawDescData)
	})
	return file_appchain_proto_rawDescData
}

var file_appchain_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_appchain_proto_goTypes = []interface{}{
	(*L1StakerRewardsAmountRequest)(nil),          // 0: acorus.rpc.appchain.L1StakerRewardsAmountRequest
	(*L1StakerRewardsAmountResponse)(nil),         // 1: acorus.rpc.appchain.L1StakerRewardsAmountResponse
	(*L2StakerRewardsAmountRequest)(nil),          // 2: acorus.rpc.appchain.L2StakerRewardsAmountRequest
	(*L2StakerRewardsAmountResponse)(nil),         // 3: acorus.rpc.appchain.L2StakerRewardsAmountResponse
	(*L2UnStakeRecordRequest)(nil),                // 4: acorus.rpc.appchain.L2UnStakeRecordRequest
	(*L2UnStakeRecord)(nil),                       // 5: acorus.rpc.appchain.L2UnStakeRecord
	(*L2UnStakeRecordResponse)(nil),               // 6: acorus.rpc.appchain.L2UnStakeRecordResponse
	(*L2StakeRecordRequest)(nil),                  // 7: acorus.rpc.appchain.L2StakeRecordRequest
	(*L2StakeRecord)(nil),                         // 8: acorus.rpc.appchain.L2StakeRecord
	(*L2StakeRecordResponse)(nil),                 // 9: acorus.rpc.appchain.L2StakeRecordResponse
	(*L2UnStakeRecordResponse_L2UnStakePage)(nil), // 10: acorus.rpc.appchain.L2UnStakeRecordResponse.L2UnStakePage
	(*L2StakeRecordResponse_L2StakePage)(nil),     // 11: acorus.rpc.appchain.L2StakeRecordResponse.L2StakePage
}
var file_appchain_proto_depIdxs = []int32{
	10, // 0: acorus.rpc.appchain.L2UnStakeRecordResponse.page:type_name -> acorus.rpc.appchain.L2UnStakeRecordResponse.L2UnStakePage
	11, // 1: acorus.rpc.appchain.L2StakeRecordResponse.page:type_name -> acorus.rpc.appchain.L2StakeRecordResponse.L2StakePage
	5,  // 2: acorus.rpc.appchain.L2UnStakeRecordResponse.L2UnStakePage.records:type_name -> acorus.rpc.appchain.L2UnStakeRecord
	8,  // 3: acorus.rpc.appchain.L2StakeRecordResponse.L2StakePage.records:type_name -> acorus.rpc.appchain.L2StakeRecord
	0,  // 4: acorus.rpc.appchain.AppChainService.L1StakerRewardsAmount:input_type -> acorus.rpc.appchain.L1StakerRewardsAmountRequest
	2,  // 5: acorus.rpc.appchain.AppChainService.L2StakerRewardsAmount:input_type -> acorus.rpc.appchain.L2StakerRewardsAmountRequest
	4,  // 6: acorus.rpc.appchain.AppChainService.L2UnStakeRecord:input_type -> acorus.rpc.appchain.L2UnStakeRecordRequest
	7,  // 7: acorus.rpc.appchain.AppChainService.L2StakeRecord:input_type -> acorus.rpc.appchain.L2StakeRecordRequest
	1,  // 8: acorus.rpc.appchain.AppChainService.L1StakerRewardsAmount:output_type -> acorus.rpc.appchain.L1StakerRewardsAmountResponse
	3,  // 9: acorus.rpc.appchain.AppChainService.L2StakerRewardsAmount:output_type -> acorus.rpc.appchain.L2StakerRewardsAmountResponse
	6,  // 10: acorus.rpc.appchain.AppChainService.L2UnStakeRecord:output_type -> acorus.rpc.appchain.L2UnStakeRecordResponse
	9,  // 11: acorus.rpc.appchain.AppChainService.L2StakeRecord:output_type -> acorus.rpc.appchain.L2StakeRecordResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_appchain_proto_init() }
func file_appchain_proto_init() {
	if File_appchain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appchain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1StakerRewardsAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1StakerRewardsAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2StakerRewardsAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2StakerRewardsAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2UnStakeRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2UnStakeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2UnStakeRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2StakeRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2StakeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2StakeRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2UnStakeRecordResponse_L2UnStakePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appchain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2StakeRecordResponse_L2StakePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appchain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_appchain_proto_goTypes,
		DependencyIndexes: file_appchain_proto_depIdxs,
		MessageInfos:      file_appchain_proto_msgTypes,
	}.Build()
	File_appchain_proto = out.File
	file_appchain_proto_rawDesc = nil
	file_appchain_proto_goTypes = nil
	file_appchain_proto_depIdxs = nil
}
